# Generated by Django 5.1.1 on 2024-10-05 17:50

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("images", "0001_initial"),
        ("professors", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "slug",
                    models.SlugField(allow_unicode=True, max_length=255, unique=True),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                    ),
                ),
                (
                    "video",
                    models.FileField(
                        blank=True, null=True, upload_to="videos/%Y/%m/%d"
                    ),
                ),
                ("sale_number", models.PositiveSmallIntegerField(default=0)),
                (
                    "is_sale",
                    models.BooleanField(
                        default=True,
                        help_text="if is sale is true, this course can be sale ,otherwise this course can't",
                    ),
                ),
                ("is_free", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("total_like", models.PositiveIntegerField(default=0)),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="course_image",
                        to="images.image",
                    ),
                ),
                (
                    "professor",
                    models.ForeignKey(
                        limit_choices_to={"is_active": True},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="professor_course",
                        to="professors.professor",
                    ),
                ),
            ],
            options={
                "verbose_name": "course",
                "verbose_name_plural": "courses",
                "db_table": "course",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("body", models.TextField(max_length=2048)),
                ("public", models.BooleanField(default=True)),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Enter a score of 1 to 5",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("admin_response", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        limit_choices_to={"is_active": True, "is_verified": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_comment",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        limit_choices_to={"is_active": True, "is_sale": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_comment",
                        to="courses.course",
                    ),
                ),
            ],
            options={
                "verbose_name": "comment",
                "verbose_name_plural": "comments",
                "db_table": "comment",
            },
        ),
        migrations.CreateModel(
            name="CourseCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("is_public", models.BooleanField(default=True)),
                (
                    "slug",
                    models.SlugField(allow_unicode=True, max_length=200, unique=True),
                ),
                (
                    "icon",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="image_category",
                        to="images.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "category",
                "verbose_name_plural": "categories",
                "db_table": "category",
            },
        ),
        migrations.AddField(
            model_name="course",
            name="category",
            field=models.ManyToManyField(
                related_name="category_course", to="courses.coursecategory"
            ),
        ),
        migrations.CreateModel(
            name="DiscountCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "discount_type",
                    models.CharField(
                        choices=[("درصدی", "درصدی"), ("مقدار", "مقدار")],
                        default="بدون تخفیف",
                        max_length=10,
                    ),
                ),
                ("value", models.PositiveIntegerField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expired_date", models.DateTimeField()),
                (
                    "course",
                    models.ForeignKey(
                        limit_choices_to={"is_active": True, "is_sale": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_discount",
                        to="courses.course",
                    ),
                ),
            ],
            options={
                "verbose_name": "discount",
                "verbose_name_plural": "discounts",
                "db_table": "discount",
            },
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("dislike", models.BooleanField(default=False)),
                (
                    "course",
                    models.ForeignKey(
                        limit_choices_to={"is_active": True},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="course_like",
                        to="courses.course",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        limit_choices_to={"is_active": True, "is_verified": True},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="user_like",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "like",
                "verbose_name_plural": "likes",
                "db_table": "like",
                "unique_together": {("user", "course")},
            },
        ),
    ]
