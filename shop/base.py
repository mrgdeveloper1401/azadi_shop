"""
Django settings for shop project.

Generated by 'django-api_admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

from celery.schedules import crontab
from dotenv import load_dotenv
# from shop.email_config import *
from shop.media_sms_config import *
from shop.rest_framework_config import *
from shop.uppercase_password_validator import UppercasePasswordValidator
from shop.simple_jwt_config import SIMPLE_JWT
from shop.liara_config import *
from core.datetime_config import now
from shop.chash_config import SESSION_ENGINE, CACHES
from shop.ckeditor_config import *
from dj_database_url import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# SECURITY WARNING: keep the secret key used in production secret!
load_dotenv()
SECRET_KEY = os.environ.get('LIARA_SECRET_KEY')


THIRD_PARTY_APPS = [
    'users.apps.UsersConfig',
    'courses.apps.CoursesConfig',
    "images.apps.ImagesConfig",
    'orders.apps.OrdersConfig',
    "professors.apps.ProfessorsConfig",
    'payments.apps.PaymentsConfig',
    "main_settings.apps.MainSettingsConfig",
    # "coupons.apps.CouponsConfig",
]

THIRD_PARTY_PACKAGE = [
    "rest_framework",
    'rest_framework_simplejwt',
    'drf_spectacular',
    'debug_toolbar',
    "rest_framework_simplejwt.token_blacklist",
    "treebeard",
    "django_filters",
    "corsheaders",
    "django_celery_results",
    "django_celery_beat",
    "django_logging",
    "django_ckeditor_5",

]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',
    'django.contrib.gis',
    *THIRD_PARTY_APPS,
    *THIRD_PARTY_PACKAGE,

]

# liara database
DATABASES = {
    'default': config(default=os.environ.get('LIARA_DATABASE_URL'))
}


MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_logging.middleware.RequestLogMiddleware',
]

ROOT_URLCONF = 'shop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shop.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'shop.uppercase_password_validator.UppercasePasswordValidator',
    }
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_TZ = True

USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATICFILES_DIRS = [
#     BASE_DIR / "static"
# ]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# user
AUTH_USER_MODEL = 'users.UserAccount'

# spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Azad project',
    'DESCRIPTION': 'Your  description',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}

# database config
# if DEBUG:
#     DATABASES = {
#         'default': {
#             'ENGINE': "django.contrib.gis.db.backends.postgis",
#             "NAME": 'azadi',
#             "PASSWORD": "postgres",
#             "USER": "postgres",
#             "PORT": "5432",
#             "HOST": "localhost"
#         }
#     }

# CELERY BEAT SCHEDULER
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Django-storages configuration
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    }
}

# logging in django
log_file = BASE_DIR / "logs"
res = log_file / f"logs_{now().strftime('%Y-%m-%d')}"
DJANGO_LOGGING = {
    "AUTO_INITIALIZATION_ENABLE": True,
    "INITIALIZATION_MESSAGE_ENABLE": True,
    "LOG_FILE_LEVELS": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
    "LOG_DIR": f"{res}",
    "LOG_FILE_FORMATS": {
        "DEBUG": 1,
        "INFO": 1,
        "WARNING": 1,
        "ERROR": 1,
        "CRITICAL": 1,
    },
    "LOG_CONSOLE_LEVEL": "DEBUG",
    "LOG_CONSOLE_FORMAT": 1,
    "LOG_CONSOLE_COLORIZE": True,
    "LOG_DATE_FORMAT": "%Y-%m-%d %H:%M:%S",
    "LOG_EMAIL_NOTIFIER": {
        "ENABLE": False,
        "NOTIFY_ERROR": False,
        "NOTIFY_CRITICAL": False,
        "LOG_FORMAT": 1,
        "USE_TEMPLATE": True,
    },
}

CELERY_BEAT_SCHEDULE = {
    'delete_otp_code': {
        'task': "users.tasks.delete_otp_code",
        'schedule': crontab(minute='*/2'),
    }
}
